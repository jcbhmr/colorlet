diff --git a/node_modules/await-sync/mod.js b/node_modules/await-sync/mod.js
index 867ee90..5fa650e 100644
--- a/node_modules/await-sync/mod.js
+++ b/node_modules/await-sync/mod.js
@@ -19,11 +19,14 @@ function createWorker (signal) {
   return function awaitSync (fn, formatter) {
     const source = 'export default ' + fn.toString()
     const mc = new MessageChannel()
+    mc.port1.unref?.()
+    mc.port2.unref?.()
     const localPort = mc.port1
     const remotePort = mc.port2
     worker.postMessage({ port: remotePort, code: source, ab }, [remotePort])
 
     return function runSync (...args) {
+      Atomics.store(int32, 0, 0)
       // Send the arguments to the worker thread
       localPort.postMessage(args)
       // Wait for the worker thread to send the result back
diff --git a/node_modules/await-sync/worker.js b/node_modules/await-sync/worker.js
index fdb4f16..4909253 100644
--- a/node_modules/await-sync/worker.js
+++ b/node_modules/await-sync/worker.js
@@ -4,6 +4,7 @@ const textEncoder = new TextEncoder()
 
 addEventListener('message', async evt => {
   const { port, code, ab } = evt.data
+  port.unref?.()
   const data = new Uint8Array(ab, 8)
   const int32 = new Int32Array(ab, 0, 2)
 
@@ -24,8 +25,7 @@ addEventListener('message', async evt => {
     }
   }
 
-  const blob = new Blob([code], { type: 'text/javascript' })
-  const url = URL.createObjectURL(blob)
+  const url = "data:text/javascript," + encodeURIComponent(code)
   const { default: fn } = await import(url)
 
   port.onmessage = async function onmessage (evt) {
@@ -50,3 +50,16 @@ addEventListener('message', async evt => {
     write2(u8)
   }
 })
+
+export {};
+if (typeof process !== "undefined") {
+  // You can't console.log() anything since all I/O goes THROUGH THE MAIN THREAD
+  // which is blocked by Atomics.wait(). Thus, we need to write somewhere else.
+  const { appendFileSync } = await import("node:fs");
+  process.on("uncaughtExceptionMonitor", e => {
+    appendFileSync("error.log", e.stack + "\n");
+  });
+  process.on("unhandledRejection", e => {
+    appendFileSync("error.log", e.stack + "\n");
+  });
+}
